enum UserRole {
    User
    ADMIN
}


type User {
    id: ID!
    name: String!
    nickname: String!
    email: String!
    isConfirmed: Boolean
    roles: [Role!]!
    tokens: [Token!]!
    createdAt: Int!
    updatedAt: Int!
    deactivatedAt: Int
}

type Tokens {
    accessToken: String!
    refreshToken: String!
}

type Role {
    id: ID!
    name: String!
}

type Token {
    id: ID!
    user: User
    refresh: String!
    userAgent: String!
    ip: String!
    createdAt: Int!
    lastLoginAt: Int!
}

input CreateUserInput {
    name: String!
    email: String!
    nickname: String!
    password: String!
}

input LoginDTO {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String!
    email: String!
    nickname: String!
}

input PasswordChangeInput {
    currentPassword: String!
    newPassword: String!
}

type Query {
    getAllUsers: [User!]!
    getUserById(id: ID): User
    getProfile: User

    getAllRoles: [Role!]!
    getRoleById(id: ID): Role

    getTokenById(id: ID): Token
}

type Mutation {
    createUser(input: CreateUserInput!): User
    login(input: LoginDTO!): Tokens!
    updateUser(input: UpdateUserInput): User
    deleteUser(id: ID!): String
    updateTokens(refresh: String!): Tokens
    passwordChange(input: PasswordChangeInput): String

    assignRole(role: UserRole!): String
    takeRole(role: UserRole!): String
    banUser(id: ID!): String
    unBanUser(id: ID!): String
}